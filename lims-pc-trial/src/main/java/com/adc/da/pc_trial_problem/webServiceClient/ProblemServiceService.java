
package com.adc.da.pc_trial_problem.webServiceClient;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "ProblemServiceService", targetNamespace = "http://problem.ws.tpm.dflzm.com", wsdlLocation = "http://127.0.0.1:8080/IS/services/ProblemService?wsdl")
public class ProblemServiceService
    extends Service
{

    private final static URL PROBLEMSERVICESERVICE_WSDL_LOCATION;
    private final static WebServiceException PROBLEMSERVICESERVICE_EXCEPTION;
    private final static QName PROBLEMSERVICESERVICE_QNAME = new QName("http://problem.ws.tpm.dflzm.com", "ProblemServiceService");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
        	//测试
            url = new URL("http://172.15.56.141/IS/services/ProblemService?wsdl");
            //正式
            //url = new URL("http://172.15.1.91/IS/services/ProblemService?wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        PROBLEMSERVICESERVICE_WSDL_LOCATION = url;
        PROBLEMSERVICESERVICE_EXCEPTION = e;
    }

    public ProblemServiceService() {
        super(__getWsdlLocation(), PROBLEMSERVICESERVICE_QNAME);
    }

    public ProblemServiceService(WebServiceFeature... features) {
        super(__getWsdlLocation(), PROBLEMSERVICESERVICE_QNAME, features);
    }

    public ProblemServiceService(URL wsdlLocation) {
        super(wsdlLocation, PROBLEMSERVICESERVICE_QNAME);
    }

    public ProblemServiceService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, PROBLEMSERVICESERVICE_QNAME, features);
    }

    public ProblemServiceService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ProblemServiceService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns ProblemService
     */
    @WebEndpoint(name = "ProblemService")
    public ProblemService getProblemService() {
        return super.getPort(new QName("http://problem.ws.tpm.dflzm.com", "ProblemService"), ProblemService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ProblemService
     */
    @WebEndpoint(name = "ProblemService")
    public ProblemService getProblemService(WebServiceFeature... features) {
        return super.getPort(new QName("http://problem.ws.tpm.dflzm.com", "ProblemService"), ProblemService.class, features);
    }

    private static URL __getWsdlLocation() {
        if (PROBLEMSERVICESERVICE_EXCEPTION!= null) {
            throw PROBLEMSERVICESERVICE_EXCEPTION;
        }
        return PROBLEMSERVICESERVICE_WSDL_LOCATION;
    }

}
